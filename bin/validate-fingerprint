#!/bin/bash

if [ "$1" = "-h" -o "$1" = "--help" ]; then
  cat <<HERE
A utility for trusting new systems within a remote private network.

Verify the SSH fingerprint of a system in a private network by comparing it
with the fingerprint reported through a trusted intermediary on the same
network.

If the fingerprints reported by both channels match, then this utility extends
the known hosts of the local system with the public address of the new system.
Following this, the new system can be considered a trusted system, and the
public address can be safely used to make SSH connections.

                      Dangerous   | Private Network
   .--------------.   Internet    |
   | Local system |               +----------------.
   |              |-------------->| Trusted system |
   | .------------|<--------------|                |
   | |            |               +----------------'
   | |            |               |     ^  |
   | |            |               |     |  v
   | |            |               +----------------.
   | |            |----- ??? ---->| New system     |
   | |         .--|<---- ??? -----|                |
   | |         |  |               +----------------'
   | '--> = <--'  |               |
   '--------------'               |
HERE

  exit 0
fi

set -euo pipefail

read -p '(1/3) Public address of new system: ' new_address_public
read -p '(2/3) Private address of new system: ' new_address_private
read -p '(3/3) Public address of trusted system: ' trusted_address

function keyscan() {
  # SSH's default behavior is to prompt the user when an address is not
  # recognized. In this context, the address is explicitly intended to be
  # trusted, so this condition should trigger a non-recoverable failure. The
  # `StrictHostKeyChecking` option causes SSH to fail.
  ssh -o StrictHostKeyChecking=yes ${trusted_address} "ssh-keyscan -t ecdsa $1 2> /dev/null"
}

echo

if [ "$new_address_public" == "$new_address_private" ]; then
  echo Error: The public and private addresses must differ. >&2
  exit 1
fi

echo Requesting key via private address...
key_via_private=$(keyscan $new_address_private)

echo Requesting key via public address...
key_via_public=$(keyscan $new_address_public)

anon_key_via_private=$(echo $key_via_private | awk '{ print $2 " " $3 }')
anon_key_via_public=$(echo $key_via_public | awk '{ print $2 " " $3 }')

echo

if [ "$anon_key_via_private" = '' ]; then
  echo Error: Could not retrieve fingerprint from private address. >&2
  exit 1
elif [ "$anon_key_via_public" = '' ]; then
  echo Error: Could not retrieve fingerprint from public address. >&2
  exit 1
elif [ "$anon_key_via_private" != "$anon_key_via_public" ]; then
  echo Error: Fingerprint hashes did not match. >&2
  echo $key_via_private >&2
  echo $key_via_public >&2
  exit 1
else
  echo "# $new_address_public trusted via $trusted_address on $(date)" >> ~/.ssh/known_hosts
  echo $key_via_public >> ~/.ssh/known_hosts
  echo Fingerprint verified. The address $new_address_public is now trusted.
fi
