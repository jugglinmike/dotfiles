#!/bin/bash -e

function help() {
  cat <<HELP
Usage: replay-merge.sh MERGE_SHA TARGET_BRANCH
Re-apply apply a given merge commit onto some other TARGET_BRANCH that shares
a similar history.
HELP
}

# Get a space-separated list of parents for a given commit
function parents {
  git show --no-patch --format="%P" $1
}

# Given a reference to a commit, find the equivalent commit in some other
# branch
function alt_version {
  local ref=$1
  local other_branch=$2
  local subject=$(git show --no-patch --format="%s" $ref)

  git log --format="%H" --grep "$subject" --fixed-strings $other_branch
}

function current_sha {
  git rev-parse HEAD
}

function branch_base {
  local unique_commits=($(git log --format="%H" $2 ^$1))
  git rev-parse ${unique_commits[-1]}~
}

# Merge the commit specified by the first argument into the current branch,
# re-using the author and message of the commit specified by the second
# argument
function merge {
  local author=$(git show --no-patch --format="format:%an <%ae>" $2)
  local message=$(git show --no-patch --format="%B" $2)
  git merge --no-ff --no-commit $1
  git commit --allow-empty --author="$author" -m "$message"
}

if [[ "$1" == "-h" || "$1" == "--help" ]]; then help; exit; fi

if [[ "$1" == "" || "$2" == "" ]]; then help; exit 1; fi

MERGE_SHA=$1
TARGET_BRANCH=$2
PARENTS=($(parents $MERGE_SHA))
FOO=$(branch_base ${PARENTS[0]} ${PARENTS[1]})
FREE_PARENT=$(alt_version $FOO $TARGET_BRANCH)

git checkout --detach $FREE_PARENT
git cherry-pick ${PARENTS[0]}..${PARENTS[1]}

FAKE_BRANCH=$(current_sha)

git checkout $TARGET_BRANCH
merge $FAKE_BRANCH $MERGE_SHA
