#!/usr/bin/env bash

name=$(basename $0)
logdir=/var/log/backup
now=$(date +%Y-%m-%d_%H:%M:%S)
prefix=$now
dry_run_flag=""
# Un-comment to make dry run
#dry_run_flag="--dry-run"

function help() {
  cat <<HELP
Usage: $name [SRC] [DEST]
Clone the contents of the SRC directory into the DEST directory, preserving
files that already exist in DEST and honoring ignore rules specified by any
subdirectory's '.gitignore' file.
HELP
}

if [[ "$1" == "-h" || "$1" == "--help" ]]; then help; exit; fi
if [[ "$1" == "" || "$2" == "" ]]; then help; exit 1; fi


if [ ! -d $logdir ]; then
  echo $name: log file directory not available: $logdir >&2
  exit 1
fi

if [ ! -w $logdir ]; then
  echo $name: log file directory is not writable: $logdir >&2
  exit 1
fi


if [[ "$dry_run_flag" != "" ]]; then
  prefix=DRY-$prefix
fi

prefix=$logdir/$prefix

# Synchronize most files, preserving any files in the destination that do not
# also exist in the source. Skip the following:
#
# - files mentioned in a .gitignore file. These are typically artifacts of
#   active development (build files, downloaded binaries, etc) and therefore
#   not appropriate for backup
#
# NOTE TO SELF: I've disabled the following behavior because it's an
# optimization that is more dangerous than it's worth. If storage space ever
# becomes an issue, revisit by using the `--exclude=".git/"` option and
# removing the `exit` command.
#
# > - `.git` directories and their contents. These are synchronized with a
# >   dedicated command later in this script
rsync \
  --archive \
  --progress \
  $dry_run_flag \
  --copy-links \
  --copy-dirlinks \
  --omit-dir-times \
  --no-perms \
  --filter="dir-merge,- /.gitignore" \
  $1 $2 \
  2> >(tee $prefix-err.log) \
  1> >(tee $prefix-out.log)

exit

echo
echo 'Now syncing git directories...'
echo

# Synchronize files in all `.git` directories, removing files from the
# destination that do not also exist in the source. File removal is desirable
# because git automatically manages these files, removing those that are no
# longer necessary.
#
# This was not fun to write. Here's what's going on:
#
# - Paths are tested as they are visited, so there needs to be an include rule
#   for all directories ('*/') to ensure that `.git` directories are eventually
#   reached
# - All files within `.git` directories are included
# - Everything else (i.e. files that are not within `.git` directories) are
#   excluded
#
# The above selection still contains directories that are not in a direct path
# to some `.git` directory. For instance, in the followig tree:
#
#     top/
#     ├── a
#     │   └── .git
#     └── b
#
# The selection contains "top/", "top/a/", "top/a/.git/", and "top/b/". Since
# this invocation includes the `--delete` flag, the inclusion of "top/b/" is
# undesirable.
#
# To address this, the command uses rsync's "risk" and "protect" filter rules.
# From the documentation:
#
# > protect, P specifies a pattern for protecting files from deletion.
# > risk, R files that match the pattern are not protected.
#
# These are interpreted from left-to-right, so sub-directories of `.git`
# directories (`.git/**/`) are explicitly labeled with "risk", and then all
# other directories (`*/`) are labeled with "protect". The net effect is that
# any directories in the selection that exist outside of a `.git` directory are
# not modified.
rsync \
  --recursive \
  --progress \
  --copy-dirlinks \
  $dry_run_flag \
  --delete \
  --filter="dir-merge,- /.gitignore" \
  --filter='risk .git/**/' \
  --filter='protect */' \
  --include='*/' \
  --include='.git/**' \
  --exclude='*' \
  --prune-empty-dirs \
  $1 $2 \
  2> >(tee $prefix-git-err.log) \
  1> >(tee $prefix-git-out.log)
